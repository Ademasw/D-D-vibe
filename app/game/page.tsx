"use client"

import type React from "react"

import { useState, useEffect, useRef } from "react"
import { useSearchParams } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Progress } from "@/components/ui/progress"
import { InventoryPanel } from "@/components/inventory-panel"
import { WorldMap } from "@/components/world-map"
import { QuestJournal } from "@/components/quest-journal"
import { CharacterSheet } from "@/components/character-sheet"
import type { Character, InventoryItem, Quest, NPC, CombatEvent } from "@/lib/types"
import { canLevelUp, levelUpCharacter } from "@/lib/level-system"
import { STAT_NAMES } from "@/lib/character-generator"

interface HistoryItem {
  type: "player" | "dm" | "roll" | "levelup" | "combat"
  content: string
  roll?: number
  timestamp: string
}

interface GameData {
  character: Character
  inventory: InventoryItem[]
  quests: Quest[]
  visitedLocations: string[]
  currentLocation: string
  encounteredNPCs: NPC[]
  combatLog: CombatEvent[]
  history: HistoryItem[]
}

export default function GamePage() {
  const searchParams = useSearchParams()
  const sessionId = searchParams.get("sessionId")

  const [gameData, setGameData] = useState<GameData | null>(null)
  const [actionText, setActionText] = useState("")
  const [loading, setLoading] = useState(false)
  const [initialLoading, setInitialLoading] = useState(true)
  const [activeTab, setActiveTab] = useState("game")
  const messagesEndRef = useRef<HTMLDivElement>(null)

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }

  useEffect(() => {
    scrollToBottom()
  }, [gameData?.history])

  useEffect(() => {
    if (!sessionId) {
      alert("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
      window.location.href = "/"
      return
    }

    loadSession()
  }, [sessionId])

  const loadSession = async () => {
    try {
      const response = await fetch(`/api/session/${sessionId}`)
      if (!response.ok) {
        throw new Error("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
      }

      const data = await response.json()
      setGameData({
        character: data.character,
        inventory: data.inventory || [],
        quests: data.quests || [],
        visitedLocations: data.visitedLocations || ["goldenheart-tavern"],
        currentLocation: data.currentLocation || "goldenheart-tavern",
        encounteredNPCs: data.encounteredNPCs || [],
        combatLog: data.combatLog || [],
        history: data.history,
      })
    } catch (error) {
      console.error("Error loading session:", error)
      alert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏")
      window.location.href = "/"
    } finally {
      setInitialLoading(false)
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!actionText.trim() || loading || !gameData) return

    const currentAction = actionText.trim()
    setActionText("")
    setLoading(true)

    try {
      const response = await fetch("/api/action", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          sessionId,
          actionText: currentAction,
        }),
      })

      if (!response.ok) {
        throw new Error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è")
      }

      const data = await response.json()

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      setGameData((prev) => {
        if (!prev) return null

        const newHistory = [
          ...prev.history,
          {
            type: "player" as const,
            content: currentAction,
            timestamp: new Date().toISOString(),
          },
          {
            type: "roll" as const,
            content: `–ë—Ä–æ—Å–æ–∫ d20: ${data.roll}`,
            roll: data.roll,
            timestamp: new Date().toISOString(),
          },
          {
            type: "dm" as const,
            content: data.result,
            timestamp: new Date().toISOString(),
          },
        ]

        let updatedCharacter = prev.character

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        if (data.experienceGain) {
          updatedCharacter = {
            ...updatedCharacter,
            experience: updatedCharacter.experience + data.experienceGain,
          }
        }

        if (data.goldChange) {
          updatedCharacter = {
            ...updatedCharacter,
            gold: updatedCharacter.gold + data.goldChange,
          }
        }

        if (data.hpChange) {
          updatedCharacter = {
            ...updatedCharacter,
            hp: Math.max(0, Math.min(updatedCharacter.maxHp, updatedCharacter.hp + data.hpChange)),
          }
        }

        return {
          ...prev,
          history: newHistory,
          character: updatedCharacter,
          inventory: data.newItems ? [...prev.inventory, ...data.newItems] : prev.inventory,
          quests: data.newQuests ? [...prev.quests, ...data.newQuests] : prev.quests,
          currentLocation: data.locationChange || prev.currentLocation,
          visitedLocations:
            data.locationChange && !prev.visitedLocations.includes(data.locationChange)
              ? [...prev.visitedLocations, data.locationChange]
              : prev.visitedLocations,
          encounteredNPCs: data.newNPC ? [...prev.encounteredNPCs, data.newNPC] : prev.encounteredNPCs,
        }
      })
    } catch (error) {
      console.error("Error:", error)
      alert("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    } finally {
      setLoading(false)
    }
  }

  const handleLevelUp = () => {
    if (!gameData) return

    const { character: newCharacter, reward } = levelUpCharacter(gameData.character)

    setGameData((prev) => {
      if (!prev) return null
      return {
        ...prev,
        character: newCharacter,
        history: [
          ...prev.history,
          {
            type: "levelup" as const,
            content: `üéâ –£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω! +${reward.hpIncrease} HP, +${reward.skillPoints} –æ—á–∫–æ–≤ –Ω–∞–≤—ã–∫–æ–≤${
              reward.newAbilities?.length ? `, –Ω–æ–≤—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏: ${reward.newAbilities.join(", ")}` : ""
            }`,
            timestamp: new Date().toISOString(),
          },
        ],
      }
    })
  }

  const handleSkillUpgrade = (skill: keyof Character["skills"]) => {
    if (!gameData || gameData.character.skillPoints <= 0) return

    setGameData((prev) => {
      if (!prev) return null
      return {
        ...prev,
        character: {
          ...prev.character,
          skillPoints: prev.character.skillPoints - 1,
          skills: {
            ...prev.character.skills,
            [skill]: Math.min(5, prev.character.skills[skill] + 1),
          },
        },
      }
    })
  }

  const handleUseItem = (itemId: string) => {
    if (!gameData) return

    const item = gameData.inventory.find((i) => i.id === itemId)
    if (!item || item.type !== "consumable") return

    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    if (item.name.includes("–ª–µ—á–µ–Ω–∏—è")) {
      const healAmount = Math.floor(Math.random() * 8) + 4 // 2d4+2
      setGameData((prev) => {
        if (!prev) return null
        return {
          ...prev,
          character: {
            ...prev.character,
            hp: Math.min(prev.character.maxHp, prev.character.hp + healAmount),
          },
          inventory: prev.inventory
            .map((i) => (i.id === itemId ? { ...i, quantity: i.quantity - 1 } : i))
            .filter((i) => i.quantity > 0),
          history: [
            ...prev.history,
            {
              type: "dm" as const,
              content: `–¢—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å ${item.name} –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—à—å ${healAmount} –æ—á–∫–æ–≤ –∑–¥–æ—Ä–æ–≤—å—è.`,
              timestamp: new Date().toISOString(),
            },
          ],
        }
      })
    }
  }

  const handleLocationSelect = (locationId: string) => {
    if (!gameData) return

    setGameData((prev) => {
      if (!prev) return null
      return {
        ...prev,
        currentLocation: locationId,
        visitedLocations: prev.visitedLocations.includes(locationId)
          ? prev.visitedLocations
          : [...prev.visitedLocations, locationId],
        history: [
          ...prev.history,
          {
            type: "dm" as const,
            content: `–¢—ã –ø–µ—Ä–µ–º–µ—â–∞–µ—à—å—Å—è –≤ –Ω–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é. –ß—Ç–æ –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?`,
            timestamp: new Date().toISOString(),
          },
        ],
      }
    })
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è NPC –≤ —Ç–µ–∫—Å—Ç–µ
  const detectNPCVoices = (text: string) => {
    const voices = []
    const lowerText = text.toLowerCase()

    if (lowerText.includes("–º–∏–ª–æ—Ä–¥") || lowerText.includes("–±–ª–∞–≥–æ–≤–æ–ª–∏—Ç–µ") || lowerText.includes("–∏–∑–≤–æ–ª–∏—Ç–µ")) {
      voices.push({ name: "–ë–ª–∞–≥–æ—Ä–æ–¥–Ω—ã–π", color: "bg-purple-600" })
    }
    if (lowerText.includes("–∑–æ–ª–æ—Ç–∏—à–∫–æ") || lowerText.includes("—Å–¥–µ–ª–æ—á–∫–∞") || lowerText.includes("–±–∞—Ä—ã—à–∏–∫")) {
      voices.push({ name: "–¢–æ—Ä–≥–æ–≤–µ—Ü", color: "bg-yellow-600" })
    }
    if (lowerText.includes("–ø—Ä–∏–∫–∞–∑") || lowerText.includes("–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞") || lowerText.includes("—Å—Ç–æ–π!")) {
      voices.push({ name: "–°—Ç—Ä–∞–∂–Ω–∏–∫", color: "bg-red-600" })
    }
    if (lowerText.includes("–±–∞—Ç—é—à–∫–∞") || lowerText.includes("–≥–æ—Ä–µ–º—ã—á–Ω—ã–π") || lowerText.includes("–Ω—É–∂–¥–∞")) {
      voices.push({ name: "–ö—Ä–µ—Å—Ç—å—è–Ω–∏–Ω", color: "bg-green-600" })
    }
    if (lowerText.includes("—Ñ–µ–Ω–æ–º–µ–Ω") || lowerText.includes("–≥–∏–ø–æ—Ç–µ–∑–∞") || lowerText.includes("–∞—Ä—Ç–µ—Ñ–∞–∫—Ç")) {
      voices.push({ name: "–£—á–µ–Ω—ã–π", color: "bg-blue-600" })
    }
    if (lowerText.includes("–¥–µ–ª—å—Ü–µ") || lowerText.includes("—à—É—Ö–µ—Ä") || lowerText.includes("–Ω–∞–≤–æ–¥–∫–∞")) {
      voices.push({ name: "–ü–ª—É—Ç", color: "bg-gray-600" })
    }
    if (lowerText.includes("–±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ") || lowerText.includes("–ø–æ–∫–∞—è–Ω–∏–µ") || lowerText.includes("–±–æ–∂–µ—Å—Ç–≤–æ")) {
      voices.push({ name: "–ñ—Ä–µ—Ü", color: "bg-indigo-600" })
    }
    if (lowerText.includes("—Å–∏–ª–∞ —Ä–µ—à–∞–µ—Ç") || lowerText.includes("—á–µ—Å—Ç—å –≤–æ–∏–Ω–∞") || lowerText.includes("–±–∏—Ç–≤–∞")) {
      voices.push({ name: "–í–∞—Ä–≤–∞—Ä", color: "bg-orange-600" })
    }
    if (lowerText.includes("–¥—è–¥—è") || lowerText.includes("—Å—Ç—Ä–∞—à–Ω–æ") || lowerText.includes("–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ")) {
      voices.push({ name: "–†–µ–±–µ–Ω–æ–∫", color: "bg-pink-600" })
    }
    if (lowerText.includes("–≤ –º–æ–∏ –≥–æ–¥—ã") || lowerText.includes("–º—É–¥—Ä–æ—Å—Ç—å") || lowerText.includes("–æ–ø—ã—Ç")) {
      voices.push({ name: "–°—Ç–∞—Ä–µ—Ü", color: "bg-amber-600" })
    }
    if (lowerText.includes("–≥–æ—Å—Ç—å") || lowerText.includes("—É–≥–æ—â–µ–Ω–∏–µ") || lowerText.includes("–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å")) {
      voices.push({ name: "–¢—Ä–∞–∫—Ç–∏—Ä—â–∏–∫", color: "bg-teal-600" })
    }
    if (lowerText.includes("–≥–ª—É–ø–µ—Ü") || lowerText.includes("–≤–ª–∞—Å—Ç—å") || lowerText.includes("–º–µ—Å—Ç—å")) {
      voices.push({ name: "–ó–ª–æ–¥–µ–π", color: "bg-black" })
    }

    return voices
  }

  if (initialLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 flex items-center justify-center">
        <div className="text-white text-xl">–ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã...</div>
      </div>
    )
  }

  if (!gameData) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 flex items-center justify-center">
        <div className="text-white text-xl">–î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 p-4">
      <div className="max-w-7xl mx-auto">
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ */}
        <Card className="mb-4 bg-slate-800 border-slate-700 text-white">
          <CardHeader>
            <CardTitle className="text-xl flex items-center justify-between">
              <span>
                {gameData.character.name} - {gameData.character.charClass}
              </span>
              <div className="flex items-center gap-4 text-sm">
                <div className="flex items-center gap-2">
                  <span>
                    ‚ù§Ô∏è {gameData.character.hp}/{gameData.character.maxHp}
                  </span>
                  <Progress value={(gameData.character.hp / gameData.character.maxHp) * 100} className="w-20 h-2" />
                </div>
                <span className="text-yellow-400">üí∞ {gameData.character.gold} –∑–æ–ª–æ—Ç–∞</span>
                <span className="text-blue-400">‚≠ê –£—Ä–æ–≤–µ–Ω—å {gameData.character.level}</span>
                {canLevelUp(gameData.character) && (
                  <Button onClick={handleLevelUp} size="sm" className="bg-yellow-600 hover:bg-yellow-700 animate-pulse">
                    –ü–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å!
                  </Button>
                )}
              </div>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-6 gap-2 text-sm">
              {Object.entries(gameData.character.stats).map(([stat, value]) => (
                <div key={stat} className="text-center">
                  <div className="font-bold">{STAT_NAMES[stat]}</div>
                  <div className="text-slate-300">{value}</div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ */}
        <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
          <TabsList className="grid w-full grid-cols-5 bg-slate-800 mb-4">
            <TabsTrigger value="game">üéÆ –ò–≥—Ä–∞</TabsTrigger>
            <TabsTrigger value="character">üìã –ü–µ—Ä—Å–æ–Ω–∞–∂</TabsTrigger>
            <TabsTrigger value="inventory">üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å</TabsTrigger>
            <TabsTrigger value="map">üó∫Ô∏è –ö–∞—Ä—Ç–∞</TabsTrigger>
            <TabsTrigger value="quests">üìã –ö–≤–µ—Å—Ç—ã</TabsTrigger>
          </TabsList>

          <TabsContent value="game">
            {/* –õ–µ–≥–µ–Ω–¥–∞ –≥–æ–ª–æ—Å–æ–≤ NPC */}
            <Card className="mb-4 bg-slate-800 border-slate-700 text-white">
              <CardHeader>
                <CardTitle className="text-lg">üé≠ –ì–æ–ª–æ—Å–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-2 text-xs">
                  <Badge className="bg-purple-600 text-white">–ë–ª–∞–≥–æ—Ä–æ–¥–Ω—ã–π</Badge>
                  <Badge className="bg-yellow-600 text-white">–¢–æ—Ä–≥–æ–≤–µ—Ü</Badge>
                  <Badge className="bg-red-600 text-white">–°—Ç—Ä–∞–∂–Ω–∏–∫</Badge>
                  <Badge className="bg-green-600 text-white">–ö—Ä–µ—Å—Ç—å—è–Ω–∏–Ω</Badge>
                  <Badge className="bg-blue-600 text-white">–£—á–µ–Ω—ã–π</Badge>
                  <Badge className="bg-gray-600 text-white">–ü–ª—É—Ç</Badge>
                  <Badge className="bg-indigo-600 text-white">–ñ—Ä–µ—Ü</Badge>
                  <Badge className="bg-orange-600 text-white">–í–∞—Ä–≤–∞—Ä</Badge>
                  <Badge className="bg-pink-600 text-white">–†–µ–±–µ–Ω–æ–∫</Badge>
                  <Badge className="bg-amber-600 text-white">–°—Ç–∞—Ä–µ—Ü</Badge>
                  <Badge className="bg-teal-600 text-white">–¢—Ä–∞–∫—Ç–∏—Ä—â–∏–∫</Badge>
                  <Badge className="bg-black text-white">–ó–ª–æ–¥–µ–π</Badge>
                </div>
              </CardContent>
            </Card>

            {/* –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä—ã */}
            <Card className="mb-4 bg-slate-800 border-slate-700 text-white">
              <CardHeader>
                <CardTitle>üìñ –•—Ä–æ–Ω–∏–∫–∞ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="h-96 overflow-y-auto space-y-3 mb-4">
                  {gameData.history.map((item, index) => {
                    const npcVoices = item.type === "dm" ? detectNPCVoices(item.content) : []

                    return (
                      <div key={index} className="flex items-start space-x-2">
                        <div className="flex-shrink-0 text-lg">
                          {item.type === "player" && "üßç‚Äç‚ôÇÔ∏è"}
                          {item.type === "roll" && "üé≤"}
                          {item.type === "dm" && "üßô"}
                          {item.type === "levelup" && "‚≠ê"}
                          {item.type === "combat" && "‚öîÔ∏è"}
                        </div>
                        <div className="flex-1">
                          <div className="flex items-center gap-2 mb-1">
                            <div className="font-semibold text-sm text-slate-300">
                              {item.type === "player" && "–¢—ã:"}
                              {item.type === "roll" && "–ë—Ä–æ—Å–æ–∫:"}
                              {item.type === "dm" && "DM:"}
                              {item.type === "levelup" && "–£—Ä–æ–≤–µ–Ω—å:"}
                              {item.type === "combat" && "–ë–æ–π:"}
                            </div>
                            {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞ NPC */}
                            {npcVoices.map((voice, voiceIndex) => (
                              <Badge key={voiceIndex} className={`${voice.color} text-white text-xs`}>
                                {voice.name}
                              </Badge>
                            ))}
                          </div>
                          <div
                            className={`${
                              item.type === "roll"
                                ? `font-bold ${item.roll && item.roll >= 15 ? "text-green-400" : item.roll && item.roll <= 5 ? "text-red-400" : "text-yellow-400"}`
                                : item.type === "levelup"
                                  ? "text-yellow-400 font-bold"
                                  : item.type === "combat"
                                    ? "text-red-400"
                                    : item.type === "dm"
                                      ? "text-slate-100 leading-relaxed"
                                      : "text-slate-100"
                            }`}
                          >
                            {item.content}
                            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è DM –æ—Ç–≤–µ—Ç–æ–≤ */}
                            {item.type === "dm" && item.content.match(/[.!?]$/) && (
                              <span className="text-green-500 ml-1 text-xs">‚úì</span>
                            )}
                          </div>
                        </div>
                      </div>
                    )
                  })}
                  {loading && (
                    <div className="flex items-center space-x-2 text-slate-400">
                      <div className="text-lg">üßô</div>
                      <div className="flex-1">
                        <div className="font-semibold text-sm">DM –æ–±–¥—É–º—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç...</div>
                        <div className="flex space-x-1">
                          <div className="w-2 h-2 bg-slate-400 rounded-full animate-bounce"></div>
                          <div
                            className="w-2 h-2 bg-slate-400 rounded-full animate-bounce"
                            style={{ animationDelay: "0.1s" }}
                          ></div>
                          <div
                            className="w-2 h-2 bg-slate-400 rounded-full animate-bounce"
                            style={{ animationDelay: "0.2s" }}
                          ></div>
                        </div>
                      </div>
                    </div>
                  )}
                  <div ref={messagesEndRef} />
                </div>

                {/* –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞ –¥–µ–π—Å—Ç–≤–∏—è */}
                <form onSubmit={handleSubmit} className="flex space-x-2">
                  <Input
                    type="text"
                    value={actionText}
                    onChange={(e) => setActionText(e.target.value)}
                    placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
                    className="flex-1 bg-slate-700 border-slate-600 text-white placeholder-slate-400"
                    disabled={loading}
                  />
                  <Button
                    type="submit"
                    disabled={loading || !actionText.trim()}
                    className="bg-gradient-to-r from-orange-500 to-red-600 hover:from-orange-600 hover:to-red-700"
                  >
                    {loading ? "‚è≥" : "‚öîÔ∏è"}
                  </Button>
                </form>

                {/* –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞ */}
                <div className="mt-2 text-xs text-slate-400">
                  üí° –°–æ–≤–µ—Ç: –ì–æ–≤–æ—Ä–∏—Ç–µ —Å NPC –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="character">
            <CharacterSheet
              character={gameData.character}
              onLevelUp={handleLevelUp}
              onSkillUpgrade={handleSkillUpgrade}
            />
          </TabsContent>

          <TabsContent value="inventory">
            <InventoryPanel inventory={gameData.inventory} character={gameData.character} onUseItem={handleUseItem} />
          </TabsContent>

          <TabsContent value="map">
            <WorldMap
              visitedLocations={gameData.visitedLocations}
              currentLocation={gameData.currentLocation}
              onLocationSelect={handleLocationSelect}
            />
          </TabsContent>

          <TabsContent value="quests">
            <QuestJournal
              quests={gameData.quests}
              onAbandonQuest={(questId) => {
                setGameData((prev) => {
                  if (!prev) return null
                  return {
                    ...prev,
                    quests: prev.quests.map((q) => (q.id === questId ? { ...q, status: "failed" as const } : q)),
                  }
                })
              }}
            />
          </TabsContent>
        </Tabs>

        {/* –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ */}
        <div className="text-center mt-4">
          <Button
            onClick={() => (window.location.href = "/")}
            variant="outline"
            className="border-slate-600 text-slate-300 hover:bg-slate-700"
          >
            üè† –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
          </Button>
        </div>
      </div>
    </div>
  )
}
