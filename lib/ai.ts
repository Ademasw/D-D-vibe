interface DeepSeekMessage {
  role: "user" | "assistant" | "system"
  content: string
}

interface DeepSeekResponse {
  choices: Array<{
    message: {
      content: string
    }
    finish_reason?: string
  }>
  error?: {
    message: string
    type: string
  }
}

export async function askDeepSeek(prompt: string): Promise<string> {
  // Check if API key is available
  if (!process.env.OPENROUTER_API_KEY) {
    console.error("API key not configured")
    return generateFallbackResponse(prompt)
  }

  try {
    console.log("Making request to DeepSeek R1 model...")
    console.log("Prompt length:", prompt.length)

    const response = await fetch("https://openrouter.ai/api/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
        "HTTP-Referer": process.env.SITE_URL || "http://localhost:3000",
        "X-Title": "D&D AI Dungeon Master",
      },
      body: JSON.stringify({
        model: "deepseek/deepseek-r1-0528",
        messages: [
          {
            role: "system",
            content: `You are an expert Dungeon Master for D&D. Create engaging adventures with unique NPC voices.

RESPONSE STYLE:
- Write in Russian language
- Be concise but vivid - focus on action and plot
- Avoid long environment descriptions - only key details
- Emphasize NPC DIALOGUES with unique voices
- Develop plot dynamically with specific events
- ALWAYS complete your thoughts

NPC VOICES (use characteristic vocabulary):
1. NOBLES: "–º–∏–ª–æ—Ä–¥", "–∏–∑–≤–æ–ª–∏—Ç–µ", "–±–ª–∞–≥–æ–≤–æ–ª–∏—Ç–µ"
2. MERCHANTS: "–∑–æ–ª–æ—Ç–∏—à–∫–æ", "—Å–¥–µ–ª–æ—á–∫–∞", "–±–∞—Ä—ã—à–∏–∫"  
3. GUARDS: "–ø—Ä–∏–∫–∞–∑", "–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞", "–Ω–∞—Ä—É—à–µ–Ω–∏–µ"
4. PEASANTS: "–±–∞—Ç—é—à–∫–∞", "–≥–æ—Ä–µ–º—ã—á–Ω—ã–π", "–Ω—É–∂–¥–∞"
5. SCHOLARS: "—Ñ–µ–Ω–æ–º–µ–Ω", "–≥–∏–ø–æ—Ç–µ–∑–∞", "–∞—Ä—Ç–µ—Ñ–∞–∫—Ç"
6. ROGUES: "–¥–µ–ª—å—Ü–µ", "—à—É—Ö–µ—Ä", "–Ω–∞–≤–æ–¥–∫–∞"
7. PRIESTS: "–±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ", "–ø–æ–∫–∞—è–Ω–∏–µ", "–±–æ–∂–µ—Å—Ç–≤–æ"
8. BARBARIANS: "—Å–∏–ª–∞", "–±–∏—Ç–≤–∞", "—á–µ—Å—Ç—å –≤–æ–∏–Ω–∞"
9. CHILDREN: "–¥—è–¥—è", "—Å—Ç—Ä–∞—à–Ω–æ", "–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ"
10. ELDERS: "–≤ –º–æ–∏ –≥–æ–¥—ã", "–º—É–¥—Ä–æ—Å—Ç—å", "–æ–ø—ã—Ç"
11. INNKEEPERS: "–≥–æ—Å—Ç—å", "—É–≥–æ—â–µ–Ω–∏–µ", "–Ω–æ–≤–æ—Å—Ç–∏"
12. VILLAINS: "–≥–ª—É–ø–µ—Ü", "–≤–ª–∞—Å—Ç—å", "–º–µ—Å—Ç—å"

RESPONSE STRUCTURE (4-6 sentences):
1. Result of player action (1-2 sentences)
2. NPC dialogue with unique voice (1-2 lines)
3. New event or plot twist (1-2 sentences)
4. Specific choice for player (1 sentence)

FORBIDDEN:
- Long environment descriptions
- Excessive atmospheric details
- Repeating known information
- Incomplete thoughts

Respond in Russian. Be brief but lively.`,
          },
          {
            role: "user",
            content: prompt,
          },
        ],
        max_tokens: 600,
        temperature: 0.8, // –ù–µ–º–Ω–æ–≥–æ —Å–Ω–∏–∂–∞–µ–º –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        top_p: 0.9,
        frequency_penalty: 0.2,
        presence_penalty: 0.1,
      }),
    })

    console.log("DeepSeek R1 response status:", response.status)
    console.log("Response headers:", Object.fromEntries(response.headers.entries()))

    if (!response.ok) {
      const errorText = await response.text()
      console.error(`DeepSeek R1 API error: ${response.status}`)
      console.error("Error response body:", errorText)

      if (response.status === 401) {
        console.error("Authentication failed - check API key")
        return "üîë –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ API.\n\n" + generateFallbackResponse(prompt)
      }

      if (response.status === 429) {
        console.error("Rate limit exceeded")
        return "‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤.\n\n" + generateFallbackResponse(prompt)
      }

      if (response.status === 400) {
        console.error("Bad request - invalid parameters")
        return "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API.\n\n" + generateFallbackResponse(prompt)
      }

      console.error("Unknown API error, using fallback")
      return generateFallbackResponse(prompt)
    }

    const responseText = await response.text()
    console.log("Raw response length:", responseText.length)
    console.log("Raw response preview:", responseText.substring(0, 500))

    if (!responseText || responseText.trim().length === 0) {
      console.error("Empty response body from DeepSeek R1")
      return generateFallbackResponse(prompt)
    }

    let data: DeepSeekResponse
    try {
      data = JSON.parse(responseText)
      console.log("Parsed response structure:", {
        hasChoices: !!data.choices,
        choicesCount: data.choices?.length || 0,
        hasError: !!data.error,
        firstChoiceHasMessage: !!data.choices?.[0]?.message,
        firstChoiceContent: data.choices?.[0]?.message?.content?.substring(0, 100),
      })
    } catch (parseError) {
      console.error("Failed to parse JSON response:", parseError)
      console.error("Response text that failed to parse:", responseText)
      return generateFallbackResponse(prompt)
    }

    if (data.error) {
      console.error("API returned error object:", data.error)
      return generateFallbackResponse(prompt)
    }

    if (!data.choices || data.choices.length === 0) {
      console.error("No choices in response")
      console.error("Full response data:", JSON.stringify(data, null, 2))
      return generateFallbackResponse(prompt)
    }

    const choice = data.choices[0]
    if (!choice) {
      console.error("First choice is null/undefined")
      return generateFallbackResponse(prompt)
    }

    if (!choice.message) {
      console.error("Choice has no message object")
      console.error("Choice structure:", JSON.stringify(choice, null, 2))
      return generateFallbackResponse(prompt)
    }

    const aiResponse = choice.message.content
    console.log("AI response type:", typeof aiResponse)
    console.log("AI response value:", aiResponse)

    if (!aiResponse) {
      console.error("Message content is null/undefined")
      return generateFallbackResponse(prompt)
    }

    if (typeof aiResponse !== "string") {
      console.error("Message content is not a string, type:", typeof aiResponse)
      console.error("Content value:", aiResponse)
      return generateFallbackResponse(prompt)
    }

    const trimmedResponse = aiResponse.trim()
    if (trimmedResponse.length === 0) {
      console.error("Message content is empty string after trim")
      return generateFallbackResponse(prompt)
    }

    // Ensure response ends properly
    let finalResponse = trimmedResponse
    if (!finalResponse.match(/[.!?]$/)) {
      finalResponse += "."
    }

    // Clean up excessive line breaks
    finalResponse = finalResponse.replace(/\n{3,}/g, "\n\n")

    console.log("‚úÖ DeepSeek R1 success! Final response length:", finalResponse.length)
    console.log("Final response preview:", finalResponse.substring(0, 200) + "...")

    return finalResponse
  } catch (error) {
    console.error("Exception in askDeepSeek:", error)
    console.error("Error stack:", error instanceof Error ? error.stack : "No stack trace")
    return generateFallbackResponse(prompt)
  }
}

// –£–ª—É—á—à–µ–Ω–Ω—ã–µ fallback –æ—Ç–≤–µ—Ç—ã —Å –≥–æ–ª–æ—Å–∞–º–∏ NPC
function generateFallbackResponse(prompt: string): string {
  console.log("Generating fallback response for prompt:", prompt.substring(0, 100))

  const lowerPrompt = prompt.toLowerCase()

  if (lowerPrompt.includes("–≥–æ–≤–æ—Ä") || lowerPrompt.includes("–¥–∏–∞–ª–æ–≥") || lowerPrompt.includes("—Ä–∞–∑–≥–æ–≤")) {
    const dialogueResponses = [
      `–¢–æ—Ä–≥–æ–≤–µ—Ü –∑–∞ –ø—Ä–∏–ª–∞–≤–∫–æ–º –æ–∂–∏–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –≤–∏–¥–µ —Ç–µ–±—è. "–û—Ö, –∑–æ–ª–æ—Ç–∏—à–∫–æ –º–æ–µ –¥–æ—Ä–æ–≥–æ–µ! –¢–æ–≤–∞—Ä–µ—Ü —É –º–µ–Ω—è –ø–µ—Ä–≤—ã–π —Å–æ—Ä—Ç, —Å–¥–µ–ª–∞–µ–º —Å–¥–µ–ª–æ—á–∫—É?" –û–Ω –¥–æ—Å—Ç–∞–µ—Ç —Å—Ç—Ä–∞–Ω–Ω—ã–π —Å–≤–µ—Ç—è—â–∏–π—Å—è –∞–º—É–ª–µ—Ç. "–í—Å–µ–≥–æ –∑–∞ —Å–æ—Ç–Ω—é –∑–æ–ª–æ—Ç—ã—Ö –æ—Ç–¥–∞–º!" –ü–æ–∫—É–ø–∞–µ—à—å, —Ç–æ—Ä–≥—É–µ—à—å—Å—è –∏–ª–∏ —É—Ö–æ–¥–∏—à—å?`,

      `–°—Ç—Ä–∞–∂–Ω–∏–∫ –ø—Ä–µ–≥—Ä–∞–∂–¥–∞–µ—Ç –ø—É—Ç—å. "–°—Ç–æ–π! –ü—Ä–µ–¥—ä—è–≤–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã! –ü–æ—Ä—è–¥–æ–∫ –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ." –ï–≥–æ –≤–∑–≥–ª—è–¥ —Å–∫–æ–ª—å–∑–∏—Ç –ø–æ —Ç–≤–æ–µ–º—É –æ—Ä—É–∂–∏—é. "–ù–æ –µ—Å–ª–∏ –Ω–∞–π–¥–µ–º –æ–±—â–∏–π —è–∑—ã–∫... –º–æ–∂–µ—Ç, –∏ –ø—Ä–æ–ø—É—â—É." –ü–æ–∫–∞–∑—ã–≤–∞–µ—à—å –¥–æ–∫—É–º–µ–Ω—Ç—ã, –ø–æ–¥–∫—É–ø–∞–µ—à—å –∏–ª–∏ –≥–æ—Ç–æ–≤–∏—à—å—Å—è –∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É?`,

      `–°—Ç–∞—Ä—ã–π –∂—Ä–µ—Ü –ø–æ–¥–Ω–∏–º–∞–µ—Ç –≥–æ–ª–æ–≤—É –æ—Ç –º–æ–ª–∏—Ç–≤. "–î–∞ –±–ª–∞–≥–æ—Å–ª–æ–≤—è—Ç —Ç–µ–±—è –±–æ–≥–∏, –¥–∏—Ç—è –º–æ–µ. –í–∏–∂—É, —Ç—è–∂–µ–ª —Ç–≤–æ–π –ø—É—Ç—å." –û–Ω –≤—Å—Ç–∞–µ—Ç —Å –∫–æ–ª–µ–Ω. "–ü–æ–∫–∞–π—Å—è –≤ –≥—Ä–µ—Ö–∞—Ö –∏ –æ–±—Ä–µ—Ç–µ—à—å —Å–ø–∞—Å–µ–Ω–∏–µ. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?" –ü—Ä–æ—Å–∏—à—å –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏—è, –∏—Å–ø–æ–≤–µ–¥—É–µ—à—å—Å—è –∏–ª–∏ —Ä–∞—Å—Å–ø—Ä–∞—à–∏–≤–∞–µ—à—å –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö?`,
    ]
    return dialogueResponses[Math.floor(Math.random() * dialogueResponses.length)]
  }

  if (lowerPrompt.includes("–∞—Ç–∞–∫") || lowerPrompt.includes("—Å—Ä–∞–∂") || lowerPrompt.includes("—É–¥–∞—Ä")) {
    const combatResponses = [
      `–¢–≤–æ–π —É–¥–∞—Ä –ø–æ–ø–∞–¥–∞–µ—Ç! –í–∞—Ä–≤–∞—Ä –≤ –∑–≤–µ—Ä–∏–Ω—ã—Ö —à–∫—É—Ä–∞—Ö –ø–æ—à–∞—Ç—ã–≤–∞–µ—Ç—Å—è. "–°–∏–ª–∞ —Ä–µ—à–∞–µ—Ç –≤—Å–µ! –°–ª–∞–±—ã–µ –Ω–µ –≤—ã–∂–∏–≤–∞—é—Ç!" - —Ä—ã—á–∏—Ç –æ–Ω, –ø–æ–¥–Ω–∏–º–∞—è —Ç–æ–ø–æ—Ä. "–í—Ä–∞–≥ —Å–∏–ª–µ–Ω, –Ω–æ —è —Å–∏–ª—å–Ω–µ–µ!" –ü—Ä–æ–¥–æ–ª–∂–∞–µ—à—å –∞—Ç–∞–∫–æ–≤–∞—Ç—å –∏–ª–∏ –∑–∞—â–∏—â–∞–µ—à—å—Å—è?`,

      `–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π –¥—É—ç–ª—è–Ω—Ç –±–ª–æ–∫–∏—Ä—É–µ—Ç —Ç–≤–æ–π –≤—ã–ø–∞–¥. "–ú–∏–ª–æ—Ä–¥, –∏–∑–≤–æ–ª–∏—Ç–µ —Å—Ä–∞–∂–∞—Ç—å—Å—è? –ü–æ—á—Ç–µ–Ω–Ω–µ–π—à–∏–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫." –ï–≥–æ –∫–ª–∏–Ω–æ–∫ —Å–≤–µ—Ä–∫–∞–µ—Ç. "–ë–ª–∞–≥–æ–≤–æ–ª–∏—Ç–µ –ø—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤ –Ω–∞ —á–µ—Å—Ç–Ω—ã–π –ø–æ–µ–¥–∏–Ω–æ–∫?" –ü—Ä–∏–Ω–∏–º–∞–µ—à—å –ø—Ä–∞–≤–∏–ª–∞ –¥—É—ç–ª–∏ –∏–ª–∏ –∞—Ç–∞–∫—É–µ—à—å –±–µ–∑ —Ü–µ—Ä–µ–º–æ–Ω–∏–π?`,

      `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä! –í—Ä–∞–≥ –ø–∞–¥–∞–µ—Ç, —Ä–æ–Ω—è—è —Å–≤–µ—Ç—è—â–∏–π—Å—è –∞–º—É–ª–µ—Ç. "–¢—ã... –Ω–µ –∑–Ω–∞–µ—à—å... —á—Ç–æ –Ω–∞—Ç–≤–æ—Ä–∏–ª..." - —Ö—Ä–∏–ø–∏—Ç –æ–Ω. –ê–º—É–ª–µ—Ç –ø—É–ª—å—Å–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–Ω—ã–º —Å–≤–µ—Ç–æ–º. –ü–æ–¥–±–∏—Ä–∞–µ—à—å –µ–≥–æ, —É–Ω–∏—á—Ç–æ–∂–∞–µ—à—å –∏–ª–∏ –±—ã—Å—Ç—Ä–æ —É—Ö–æ–¥–∏—à—å?`,
    ]
    return combatResponses[Math.floor(Math.random() * combatResponses.length)]
  }

  if (lowerPrompt.includes("–∏—Å—Å–ª–µ–¥—É") || lowerPrompt.includes("–æ—Å–º–∞—Ç—Ä") || lowerPrompt.includes("–∏—â")) {
    const explorationResponses = [
      `–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å —Å–∫—Ä—ã—Ç—É—é –Ω–∏—à—É –≤ —Å—Ç–µ–Ω–µ. –í–Ω—É—Ç—Ä–∏ –ª–µ–∂–∏—Ç –¥—Ä–µ–≤–Ω–∏–π —Å–≤–∏—Ç–æ–∫ —Å –∫–∞—Ä—Ç–æ–π. "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç," - –∑–∞–º–µ—á–∞–µ—Ç –ø—Ä–æ—Ö–æ–¥—è—â–∏–π –º–∏–º–æ —É—á–µ–Ω—ã–π. "–§–µ–Ω–æ–º–µ–Ω –º–∞–≥–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏–∏." –ò–∑—É—á–∞–µ—à—å –∫–∞—Ä—Ç—É, —Ä–∞—Å—Å–ø—Ä–∞—à–∏–≤–∞–µ—à—å —É—á–µ–Ω–æ–≥–æ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—à—å –ø–æ–∏—Å–∫–∏?`,

      `–ü–æ–¥ –ø—ã–ª—å—é –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç—Å—è —Å—Ç–∞—Ä—ã–π —Ä—ã—á–∞–≥. –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Ç–∞–π–Ω—ã–π –ø—Ä–æ—Ö–æ–¥. –ò–∑ –≥–ª—É–±–∏–Ω—ã –¥–æ–Ω–æ—Å–∏—Ç—Å—è –¥–µ—Ç—Å–∫–∏–π –≥–æ–ª–æ—Å: "–î—è–¥—è, —Ç–∞–º —Å—Ç—Ä–∞—à–Ω–æ, –Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!" –ú–∞–ª–µ–Ω—å–∫–∞—è –¥–µ–≤–æ—á–∫–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –≤ —Ç–µ–º–Ω–æ—Ç—É. –í—Ö–æ–¥–∏—à—å –≤ –ø—Ä–æ—Ö–æ–¥, —É—Å–ø–æ–∫–∞–∏–≤–∞–µ—à—å —Ä–µ–±–µ–Ω–∫–∞ –∏–ª–∏ –∏—â–µ—à—å –µ–µ —Ä–æ–¥–∏—Ç–µ–ª–µ–π?`,
    ]
    return explorationResponses[Math.floor(Math.random() * explorationResponses.length)]
  }

  // –û–±—â–∏–µ –∫—Ä–∞—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã —Å –¥–∏–∞–ª–æ–≥–∞–º–∏
  const generalResponses = [
    `–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ç–∏–ø –≤ –∫–∞–ø—é—à–æ–Ω–µ –ø–æ–¥–∑—ã–≤–∞–µ—Ç —Ç–µ–±—è. "–ï—Å—Ç—å –æ–¥–Ω–æ –¥–µ–ª—å—Ü–µ, –Ω–æ —à—É—Ö–µ—Ä –±–æ–ª—å—à–æ–π. –ë–∞—Ä—ã–≥–∞ –∏—â–µ—Ç —Å–º–µ–ª—å—á–∞–∫–æ–≤." –û–Ω –æ–≥–ª—è–¥—ã–≤–∞–µ—Ç—Å—è. "–°–ª—ã—à–∞–ª –Ω–∞–≤–æ–¥–∫—É –Ω–∞ –∂–∏—Ä–Ω—É—é –¥–æ–±—ã—á—É –≤ —Å—Ç–∞—Ä–æ–º –∑–∞–º–∫–µ. –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ?" –°–ª—É—à–∞–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫–∞–∑—ã–≤–∞–µ—à—å—Å—è?`,

    `–ú–∞–ª–µ–Ω—å–∫–∞—è –¥–µ–≤–æ—á–∫–∞ –ø–æ–¥–±–µ–≥–∞–µ—Ç –∫ —Ç–µ–±–µ. "–î—è–¥—è, —Ç—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –≥–µ—Ä–æ–π? –ú–Ω–µ —Å—Ç—Ä–∞—à–Ω–æ!" –û–Ω–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç–µ–º–Ω—ã–π –ø–µ—Ä–µ—É–ª–æ–∫. "–î–µ–¥—É—à–∫–∞ –∑–∞—à–µ–ª —Ç—É–¥–∞ –∏ –Ω–µ –≤–µ—Ä–Ω—É–ª—Å—è..." –ò–¥–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —É—Å–ø–æ–∫–∞–∏–≤–∞–µ—à—å –¥–µ–≤–æ—á–∫—É –∏–ª–∏ –∏—â–µ—à—å –µ–µ —Ä–æ–¥–∏—Ç–µ–ª–µ–π?`,

    `–ü–æ–ª –Ω–∞—á–∏–Ω–∞–µ—Ç —Ç—Ä–µ—â–∞—Ç—å –ø–æ–¥ –Ω–æ–≥–∞–º–∏ - –¥—Ä–µ–≤–Ω—è—è –ª–æ–≤—É—à–∫–∞! –¢—ã –±–∞–ª–∞–Ω—Å–∏—Ä—É–µ—à—å –Ω–∞ –∫—Ä–∞—é –ø—Ä–æ–ø–∞—Å—Ç–∏. –†—è–¥–æ–º —Å–≤–∏—Å–∞–µ—Ç —Å—Ç–∞—Ä–∞—è —Ü–µ–ø—å, –∞ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ —É–∑–∫–∏–π –≤—ã—Å—Ç—É–ø. –ü—Ä—ã–≥–∞–µ—à—å –∫ —Ü–µ–ø–∏, –∫ –≤—ã—Å—Ç—É–ø—É –∏–ª–∏ –∏—â–µ—à—å –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±?`,

    `–¢—Ä–∞–∫—Ç–∏—Ä—â–∏–∫ –º–∞—à–µ—Ç —Ç–µ–±–µ —Ä—É–∫–æ–π. "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –¥–æ—Ä–æ–≥–æ–π –≥–æ—Å—Ç—å! –õ—É—á—à–µ–µ —É–≥–æ—â–µ–Ω–∏–µ –≤ –≥–æ—Ä–æ–¥–µ!" –û–Ω –Ω–∞–∫–ª–æ–Ω—è–µ—Ç—Å—è –±–ª–∏–∂–µ. "–°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –∫—Ä—É–∂–∫–æ–π —ç–ª—è? –ì–æ–≤–æ—Ä—è—Ç, –≤ —Å—Ç–∞—Ä–æ–º –∑–∞–º–∫–µ —Ç–≤–æ—Ä—è—Ç—Å—è —Å—Ç—Ä–∞–Ω–Ω—ã–µ –¥–µ–ª–∞." –ó–∞–∫–∞–∑—ã–≤–∞–µ—à—å —ç–ª—å, —Ä–∞—Å—Å–ø—Ä–∞—à–∏–≤–∞–µ—à—å –æ –∑–∞–º–∫–µ –∏–ª–∏ –∏—â–µ—à—å –∫–æ–º–Ω–∞—Ç—É?`,

    `–°—Ç–∞—Ä–µ—Ü —Å –¥–ª–∏–Ω–Ω–æ–π –±–æ—Ä–æ–¥–æ–π –∏–∑—É—á–∞–µ—Ç —Ç–µ–±—è –º—É–¥—Ä—ã–º–∏ –≥–ª–∞–∑–∞–º–∏. "–í –º–æ–∏ –≥–æ–¥—ã –º–Ω–æ–≥–æ–µ –ø–æ–≤–∏–¥–∞–ª, —é–Ω–æ—à–∞. –ú—É–¥—Ä–æ—Å—Ç—å –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å –æ–ø—ã—Ç–æ–º." –û–Ω —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ä–∞–∑–≤–∏–ª–∫—É –¥–æ—Ä–æ–≥. "–õ–µ–≤–∞—è —Ç—Ä–æ–ø–∞ –≤–µ–¥–µ—Ç –∫ –±–æ–≥–∞—Ç—Å—Ç–≤—É, –ø—Ä–∞–≤–∞—è - –∫ —Å–ª–∞–≤–µ. –ù–æ –æ–±–µ –ø–æ–ª–Ω—ã –æ–ø–∞—Å–Ω–æ—Å—Ç–µ–π." –í—ã–±–∏—Ä–∞–µ—à—å –ª–µ–≤—É—é —Ç—Ä–æ–ø—É, –ø—Ä–∞–≤—É—é –∏–ª–∏ —Ä–∞—Å—Å–ø—Ä–∞—à–∏–≤–∞–µ—à—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ?`,
  ]

  const response = generalResponses[Math.floor(Math.random() * generalResponses.length)]
  console.log("Selected fallback response:", response.substring(0, 100))
  return `‚ö†Ô∏è –†–µ–∑–µ—Ä–≤–Ω—ã–π —Ä–µ–∂–∏–º DM\n\n${response}`
}
