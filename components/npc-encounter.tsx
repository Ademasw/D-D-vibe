"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import type { NPC, Character } from "@/lib/types"

interface NPCEncounterProps {
  npc: NPC
  character: Character
  onInteract?: (action: string) => void
  onCombat?: () => void
  onTrade?: () => void
}

export function NPCEncounter({ npc, character, onInteract, onCombat, onTrade }: NPCEncounterProps) {
  const [selectedAction, setSelectedAction] = useState<string>("")

  const getRelationshipColor = (relationship: string) => {
    const colors = {
      friendly: "bg-green-600",
      neutral: "bg-yellow-600",
      hostile: "bg-red-600",
      romantic: "bg-pink-600",
    }
    return colors[relationship as keyof typeof colors] || "bg-gray-600"
  }

  const getRelationshipIcon = (relationship: string) => {
    const icons = {
      friendly: "üòä",
      neutral: "üòê",
      hostile: "üò†",
      romantic: "üòç",
    }
    return icons[relationship as keyof typeof icons] || "ü§î"
  }

  const interactionOptions = [
    { id: "greet", label: "–ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å", icon: "üëã" },
    { id: "talk", label: "–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å", icon: "üí¨" },
    { id: "ask_quest", label: "–°–ø—Ä–æ—Å–∏—Ç—å –æ –∑–∞–¥–∞–Ω–∏—è—Ö", icon: "‚ùì" },
    { id: "ask_info", label: "–£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", icon: "‚ÑπÔ∏è" },
    { id: "intimidate", label: "–ó–∞–ø—É–≥–∞—Ç—å", icon: "üò§" },
    { id: "persuade", label: "–£–±–µ–¥–∏—Ç—å", icon: "üó£Ô∏è" },
  ]

  return (
    <Card className="bg-slate-800 border-slate-700 text-white">
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          <span>üë§ –í—Å—Ç—Ä–µ—á–∞ —Å NPC</span>
          <Badge className={`${getRelationshipColor(npc.relationship)} text-white`}>
            {getRelationshipIcon(npc.relationship)} {npc.relationship}
          </Badge>
        </CardTitle>
      </CardHeader>
      <CardContent>
        <Tabs defaultValue="info" className="w-full">
          <TabsList className="grid w-full grid-cols-3 bg-slate-700">
            <TabsTrigger value="info">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</TabsTrigger>
            <TabsTrigger value="interact">–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ</TabsTrigger>
            <TabsTrigger value="combat">–ë–æ–π</TabsTrigger>
          </TabsList>

          <TabsContent value="info" className="space-y-4">
            {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <div className="p-4 bg-slate-700 rounded">
              <div className="flex items-center gap-3 mb-3">
                <div className="text-3xl">
                  {npc.race === "–ß–µ–ª–æ–≤–µ–∫" ? "üßë" : npc.race === "–≠–ª—å—Ñ" ? "üßù" : npc.race === "–î–≤–æ—Ä—Ñ" ? "üßî" : "üë§"}
                </div>
                <div>
                  <h3 className="text-xl font-bold">{npc.name}</h3>
                  <p className="text-slate-300">
                    {npc.race} ‚Ä¢ {npc.occupation}
                  </p>
                </div>
              </div>

              <div className="space-y-2 text-sm">
                <div>
                  <strong>–í–Ω–µ—à–Ω–æ—Å—Ç—å:</strong> {npc.appearance}
                </div>
                <div>
                  <strong>–•–∞—Ä–∞–∫—Ç–µ—Ä:</strong> {npc.personality.join(", ")}
                </div>
                <div>
                  <strong>–õ–æ–∫–∞—Ü–∏—è:</strong> {npc.location}
                </div>
              </div>
            </div>

            {/* –†–æ–ª–∏ */}
            <div className="flex gap-2 flex-wrap">
              {npc.questGiver && <Badge className="bg-blue-600">–ö–≤–µ—Å—Ç–æ–¥–∞—Ç–µ–ª—å</Badge>}
              {npc.merchant && <Badge className="bg-yellow-600">–¢–æ—Ä–≥–æ–≤–µ—Ü</Badge>}
              {npc.relationship === "hostile" && <Badge className="bg-red-600">–í—Ä–∞–∂–¥–µ–±–µ–Ω</Badge>}
            </div>

            {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –±–æ—è */}
            {npc.stats && (
              <div className="p-3 bg-slate-700 rounded">
                <h4 className="font-semibold mb-2">–ë–æ–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</h4>
                <div className="grid grid-cols-3 gap-4 text-center">
                  <div>
                    <div className="text-lg font-bold text-red-400">{npc.stats.level}</div>
                    <div className="text-xs text-slate-400">–£—Ä–æ–≤–µ–Ω—å</div>
                  </div>
                  <div>
                    <div className="text-lg font-bold text-green-400">{npc.stats.hp}</div>
                    <div className="text-xs text-slate-400">–ó–¥–æ—Ä–æ–≤—å–µ</div>
                  </div>
                  <div>
                    <div className="text-lg font-bold text-blue-400">{npc.stats.ac}</div>
                    <div className="text-xs text-slate-400">–ö–ª–∞—Å—Å –î–æ—Å–ø–µ—Ö–∞</div>
                  </div>
                </div>
              </div>
            )}
          </TabsContent>

          <TabsContent value="interact" className="space-y-4">
            {/* –í–∞—Ä–∏–∞–Ω—Ç—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è */}
            <div className="grid grid-cols-2 gap-2">
              {interactionOptions.map((option) => (
                <Button
                  key={option.id}
                  variant={selectedAction === option.id ? "default" : "outline"}
                  className="justify-start"
                  onClick={() => {
                    setSelectedAction(option.id)
                    onInteract?.(option.id)
                  }}
                >
                  <span className="mr-2">{option.icon}</span>
                  {option.label}
                </Button>
              ))}
            </div>

            {/* –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
            <div className="space-y-2">
              {npc.merchant && (
                <Button onClick={onTrade} className="w-full bg-yellow-600 hover:bg-yellow-700">
                  üí∞ –¢–æ—Ä–≥–æ–≤–∞—Ç—å
                </Button>
              )}

              {npc.questGiver && (
                <Button onClick={() => onInteract?.("request_quest")} className="w-full bg-blue-600 hover:bg-blue-700">
                  üìã –ü–æ–ø—Ä–æ—Å–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
                </Button>
              )}
            </div>

            {/* –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∏ */}
            <div className="p-3 bg-slate-700 rounded">
              <h4 className="font-semibold mb-2">–í–æ–∑–º–æ–∂–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏</h4>
              <div className="space-y-1 text-sm text-slate-300">
                {npc.dialogue.slice(0, 3).map((dialogue, index) => (
                  <div key={index}>
                    <strong>{dialogue.trigger}:</strong> "{dialogue.response}"
                  </div>
                ))}
              </div>
            </div>
          </TabsContent>

          <TabsContent value="combat" className="space-y-4">
            {npc.relationship === "hostile" ? (
              <div className="space-y-4">
                <div className="p-4 bg-red-900 border border-red-600 rounded">
                  <div className="text-center">
                    <div className="text-2xl mb-2">‚öîÔ∏è</div>
                    <div className="font-bold text-red-300">–í—Ä–∞–∂–¥–µ–±–Ω—ã–π NPC –≥–æ—Ç–æ–≤ –∫ –±–æ—é!</div>
                    <div className="text-sm text-red-400 mt-1">{npc.name} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –º–∏—Ä–Ω—ã–µ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã</div>
                  </div>
                </div>

                <Button onClick={onCombat} className="w-full bg-red-600 hover:bg-red-700" size="lg">
                  ‚öîÔ∏è –ù–∞—á–∞—Ç—å –±–æ–π!
                </Button>

                <div className="text-center text-sm text-slate-400">–ü–æ–±–µ–¥–∞ –ø—Ä–∏–Ω–µ—Å–µ—Ç –æ–ø—ã—Ç –∏ –≤–æ–∑–º–æ–∂–Ω—É—é –¥–æ–±—ã—á—É</div>
              </div>
            ) : (
              <div className="p-4 bg-slate-700 rounded text-center">
                <div className="text-slate-400">
                  {npc.name} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤—Ä–∞–∂–¥–µ–±–Ω–æ.
                  <br />
                  –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –º–∏—Ä–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ.
                </div>
              </div>
            )}

            {/* –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–∏–ª */}
            {npc.stats && (
              <div className="p-3 bg-slate-700 rounded">
                <h4 className="font-semibold mb-2">–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–∏–ª</h4>
                <div className="space-y-2 text-sm">
                  <div className="flex justify-between">
                    <span>–í–∞—à —É—Ä–æ–≤–µ–Ω—å:</span>
                    <span className="text-blue-400">{character.level}</span>
                  </div>
                  <div className="flex justify-between">
                    <span>–£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:</span>
                    <span className="text-red-400">{npc.stats.level}</span>
                  </div>
                  <div className="flex justify-between">
                    <span>–í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ:</span>
                    <span className="text-green-400">
                      {character.hp}/{character.maxHp}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span>–ó–¥–æ—Ä–æ–≤—å–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:</span>
                    <span className="text-red-400">{npc.stats.hp}</span>
                  </div>
                </div>
              </div>
            )}
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  )
}
